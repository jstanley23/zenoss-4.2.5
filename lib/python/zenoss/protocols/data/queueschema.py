# Generated by Zenoss build, do not modify directly
SCHEMA = {   u'content_types': {   u'$DaemonHeartbeat': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$DaemonHeartbeat',
                                                   u'python_class': u'zenoss.protocols.protobufs.zep_pb2.DaemonHeartbeat'},
                          u'$DaemonHeartbeatSet': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$DaemonHeartbeatSet',
                                                      u'python_class': u'zenoss.protocols.protobufs.zep_pb2.DaemonHeartbeatSet'},
                          u'$Event': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$Event',
                                         u'python_class': u'zenoss.protocols.protobufs.zep_pb2.Event'},
                          u'$EventDetailItem': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventDetailItem',
                                                   u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventDetailItem'},
                          u'$EventDetailItemSet': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventDetailItemSet',
                                                      u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventDetailItemSet'},
                          u'$EventFilter': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventFilter',
                                               u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventFilter'},
                          u'$EventSummary': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventSummary',
                                                u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventSummary'},
                          u'$EventSummaryResult': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventSummaryResult',
                                                      u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventSummaryResult'},
                          u'$EventSummaryUpdateRequest': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventSummaryUpdateRequest',
                                                             u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventSummaryUpdateRequest'},
                          u'$EventSummaryUpdateResponse': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventSummaryUpdateResponse',
                                                              u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventSummaryUpdateResponse'},
                          u'$EventTagSeveritiesSet': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventTagSeveritiesSet',
                                                         u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventTagSeveritiesSet'},
                          u'$EventTime': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventTime',
                                             u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventTime'},
                          u'$EventTimeSet': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventTimeSet',
                                                u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventTimeSet'},
                          u'$EventTrigger': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventTrigger',
                                                u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventTrigger'},
                          u'$EventTriggerSet': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$EventTriggerSet',
                                                   u'python_class': u'zenoss.protocols.protobufs.zep_pb2.EventTriggerSet'},
                          u'$ModelEventList': {   u'java_class': u'org.zenoss.protobufs.modelevents.Modelevents$ModelEventList',
                                                  u'python_class': u'zenoss.protocols.protobufs.modelevents_pb2.ModelEventList'},
                          u'$Signal': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$Signal',
                                          u'python_class': u'zenoss.protocols.protobufs.zep_pb2.Signal'},
                          u'$VMwareModelRequest': {   u'java_class': u'org.zenoss.protobufs.modelrequest.Modelrequest$VMwareModelRequest',
                                                      u'python_class': u'zenoss.protocols.protobufs.modelrequest_pb2.VMwareModelRequest'},
                          u'$ZepConfig': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$ZepConfig',
                                             u'python_class': u'zenoss.protocols.protobufs.zep_pb2.ZepConfig'},
                          u'$ZepRawEvent': {   u'java_class': u'org.zenoss.protobufs.zep.Zep$ZepRawEvent',
                                               u'python_class': u'zenoss.protocols.protobufs.zep_pb2.ZepRawEvent'}},
    u'exchanges': {   u'$Heartbeats': {   u'auto_delete': False,
                                          u'content_types': [   u'$DaemonHeartbeat'],
                                          u'description': u'Used for daemon heartbeats.',
                                          u'durable': True,
                                          u'name': u'zenoss.heartbeats',
                                          u'type': u'topic'},
                      u'$MigratedEvents': {   u'auto_delete': False,
                                              u'content_types': [   u'$EventSummary'],
                                              u'description': u'Used to migrate old events to ZEP.',
                                              u'durable': True,
                                              u'name': u'zenoss.zenevents.migrated',
                                              u'type': u'topic'},
                      u'$ModelChangeEvents': {   u'auto_delete': False,
                                                 u'content_types': [   u'$ModelEventList'],
                                                 u'description': u'When a device, component, or service changes in Zenoss, a modelchange event is sent.',
                                                 u'durable': True,
                                                 u'name': u'zenoss.events.modelchange',
                                                 u'type': u'direct'},
                      u'$ModelRequests': {   u'auto_delete': False,
                                             u'content_types': [   u'$VMwareModelRequest'],
                                             u'description': u'Used to send model requests to collector daemons.',
                                             u'durable': True,
                                             u'name': u'zenoss.modelrequests',
                                             u'type': u'topic'},
                      u'$ProcessedZenEvents': {   u'auto_delete': False,
                                                  u'content_types': [   u'$EventSummary'],
                                                  u'description': u'After ZEP processes the event, the realized event will be put in the fanout exchange.',
                                                  u'durable': True,
                                                  u'name': u'zenoss.zenevents',
                                                  u'type': u'topic'},
                      u'$RawZenEvents': {   u'auto_delete': False,
                                            u'content_types': [u'$Event'],
                                            u'description': u'New zenevents will go into this exchange for ZEP to process them.',
                                            u'durable': True,
                                            u'name': u'zenoss.zenevents.raw',
                                            u'type': u'topic'},
                      u'$Signals': {   u'auto_delete': False,
                                       u'content_types': [u'$Signal'],
                                       u'description': u'When an event matches a trigger, a signal is created.',
                                       u'durable': True,
                                       u'name': u'zenoss.signals',
                                       u'type': u'direct'},
                      u'$ZepZenEvents': {   u'auto_delete': False,
                                            u'content_types': [   u'$ZepRawEvent'],
                                            u'description': u'Zenevents that have been partially transformed for ZEP go to this exchange',
                                            u'durable': True,
                                            u'name': u'zenoss.zenevents.zep',
                                            u'type': u'topic'}},
    u'queues': {   u'$RawZenEvents': {   u'auto_delete': False,
                                         u'bindings': [   {   u'exchange': u'$RawZenEvents',
                                                              u'routing_key': u'zenoss.zenevent.#'}],
                                         u'description': u'The queue that zeneventd pulls from, should only be used by ZEP daemons.',
                                         u'durable': True,
                                         u'exclusive': False,
                                         u'name': u'zenoss.queues.zep.rawevents'},
                   u'$Signals': {   u'auto_delete': False,
                                    u'bindings': [   {   u'exchange': u'$Signals',
                                                         u'routing_key': u'zenoss.signal'}],
                                    u'description': u'Queue for signal messages created from events matching triggers.',
                                    u'durable': True,
                                    u'exclusive': False,
                                    u'name': u'zenoss.queues.zep.signal'},
                   u'$StateZenEvents': {   u'auto_delete': False,
                                           u'bindings': [   {   u'exchange': u'$ProcessedZenEvents',
                                                                u'routing_key': u'zenoss.zenevent.#'}],
                                           u'description': u'Queue for StateImp. Listens for all events so StateImp can determine if they are state change events.',
                                           u'durable': True,
                                           u'exclusive': False,
                                           u'name': u'zenoss.queues.state.zenevents'},
                   u'$VMwareRequests': {   u'auto_delete': False,
                                           u'bindings': [   {   u'exchange': u'$ModelRequests',
                                                                u'routing_key': u'zenoss.modelrequests.{collector}.{service}'}],
                                           u'description': u'Queue for requests for zenvmwaremodeler to run.',
                                           u'durable': True,
                                           u'exclusive': False,
                                           u'name': u'zenoss.queues.modelrequests.vmware'},
                   u'$ZepHeartbeats': {   u'auto_delete': False,
                                          u'bindings': [   {   u'exchange': u'$Heartbeats',
                                                               u'routing_key': u'zenoss.heartbeat.#'}],
                                          u'description': u'ZEP queue for reading daemon heartbeats.',
                                          u'durable': True,
                                          u'exclusive': False,
                                          u'name': u'zenoss.queues.zep.heartbeats'},
                   u'$ZepMigratedEventArchive': {   u'auto_delete': False,
                                                    u'bindings': [   {   u'exchange': u'$MigratedEvents',
                                                                         u'routing_key': u'zenoss.events.archive'}],
                                                    u'description': u'ZEP queue for reading migrated events.',
                                                    u'durable': True,
                                                    u'exclusive': False,
                                                    u'name': u'zenoss.queues.zep.migrated.archive'},
                   u'$ZepMigratedEventSummary': {   u'auto_delete': False,
                                                    u'bindings': [   {   u'exchange': u'$MigratedEvents',
                                                                         u'routing_key': u'zenoss.events.summary'}],
                                                    u'description': u'ZEP queue for reading migrated events.',
                                                    u'durable': True,
                                                    u'exclusive': False,
                                                    u'name': u'zenoss.queues.zep.migrated.summary'},
                   u'$ZepModelChange': {   u'auto_delete': False,
                                           u'bindings': [   {   u'exchange': u'$ModelChangeEvents',
                                                                u'routing_key': u'zenoss.event.modelchange'}],
                                           u'description': u'Queue for ZEP to consume model change events.',
                                           u'durable': True,
                                           u'exclusive': False,
                                           u'name': u'zenoss.queues.zep.modelchange'},
                   u'$ZepZenEvents': {   u'auto_delete': False,
                                         u'bindings': [   {   u'exchange': u'$ZepZenEvents',
                                                              u'routing_key': u'zenoss.zenevent.#'}],
                                         u'description': u'The queue that ZEP pulls from, should only be used by ZEP daemons.',
                                         u'durable': True,
                                         u'exclusive': False,
                                         u'name': u'zenoss.queues.zep.zenevents'}}}
