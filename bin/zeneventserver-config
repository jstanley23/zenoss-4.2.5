#!/usr/bin/env python

import optparse
import os
import re
import sys
import tempfile

PROPERTY_DELIM = re.compile(r'(?:\s*[=:])')
def zenPath(*args):
    return os.path.abspath(os.path.join(os.environ['ZENHOME'], *args))

def parse_properties(conf_file):
    if not os.path.isfile(conf_file):
        return
    with open(conf_file) as global_conf:
        for line in global_conf:
            name = None
            value = None
            if not line.startswith('#'):
                fields = re.split(PROPERTY_DELIM, line.rstrip(), 1)
                if len(fields) > 1:
                    name, value = fields
            # Strip trailing whitespace and ensure each line has a trailing
            # newline (fixes issues with noeol).
            yield (line.rstrip() + '\n', name, value)

def create_tmpfile(path):
    paths = (path, path + '.example')
    for p in paths:
        try:
            statinfo = os.stat(p)
        except OSError:
            continue
        (tmpfd,tmpname) = tempfile.mkstemp(suffix='.conf',dir=os.path.dirname(p),text=True)
        # Clone permissions from original file
        os.chmod(tmpname, statinfo.st_mode)
        os.chown(tmpname, statinfo.st_uid, statinfo.st_gid)
        return tmpfd, tmpname

    return tempfile.mkstemp(suffix='.conf', dir=os.path.dirname(path), text=True)

def print_property(property_name):
    filename = zenPath('etc', 'zeneventserver.conf')
    for line, name, value in parse_properties(filename):
        if name == property_name:
            print value
            break

def remove_properties(properties_to_remove):
    filename = zenPath('etc', 'zeneventserver.conf')
    (tmpfd,tmpname) = create_tmpfile(filename)
    output_file = os.fdopen(tmpfd, 'wb')
    found_properties = set()
    try:
        for line, name, value in parse_properties(filename):
            if name is None or name not in properties_to_remove:
                output_file.write(line)
            else:
                found_properties.add(name)
        output_file.close()
        if len(found_properties) > 0:
            os.rename(tmpname, filename)
    finally:
        try:
            os.remove(tmpname)
        except OSError:
            pass

def update_properties(properties_dict):
    filename = zenPath('etc', 'zeneventserver.conf')
    (tmpfd,tmpname) = create_tmpfile(filename)
    output_file = os.fdopen(tmpfd, 'wb')
    found_properties = set()
    try:
        for line, name, value in parse_properties(filename):
            if name is None or not name in properties_dict:
                output_file.write(line)
            elif name not in found_properties:
                newval = properties_dict.get(name)
                output_file.write("%s=%s\n" % (name, newval))
                found_properties.add(name)

        for name, val in properties_dict.iteritems():
            if not name in found_properties:
                output_file.write("%s=%s\n" % (name, val))

        output_file.close()
        os.rename(tmpname, filename)
    finally:
        try:
            os.remove(tmpname)
        except OSError:
            pass

def main():
    if 'ZENHOME' not in os.environ:
        print >> sys.stderr, (
            "ZENHOME not set. You must run this script as the zenoss user.")
        sys.exit(1)
    parser = optparse.OptionParser(usage='%prog <-p|-r|-u> prop_name[=prop_val] [...]')
    parser.add_option('-p', '--print', dest='get', action="store_true", default=False,
            help='Prints property from the configuration file.')
    parser.add_option('-r', '--remove', dest='remove', action='store_true', default=False,
            help='Removes properties from the configuration file')
    parser.add_option('-u', '--update', dest='update', action='store_true', default=False,
            help='Adds or updates properties in the configuration file')
    (options, args) = parser.parse_args(args=sys.argv[1:])

    if not args:
        parser.error('required property names not provided')

    numcmds = int(options.get) + int(options.remove) + int(options.update)

    if not numcmds:
        parser.error("Must specify command (-p|-r|-u)")
    if numcmds > 1:
        parser.error('Only one command can be specified (-p|-r|-u)')

    if options.get:
        if len(args) > 1:
            parser.error("Print option only takes one property name")
        print_property(args[0])
    elif options.remove:
        remove_properties(args)
    else:
        argsdict = {}
        for arg in args:
            splitargs = arg.split('=', 1)
            if len(splitargs) != 2:
                parser.error('invalid argument: %s' % arg)
            name = splitargs[0].strip()
            value = splitargs[1].strip()
            if len(name) == 0 or len(value) == 0:
                parser.error('invalid argument: %s' % arg)
            argsdict[name] = value
        update_properties(argsdict)

if __name__ == '__main__':
    main()
